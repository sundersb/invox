<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="SELECT_INVOICE_PEOPLE" xml:space="preserve">
    <value>select distinct
  P.RECID,
  P.T_POL,
  cpconvert (866, 1251, P.SN_POL) SN_POL,
  P.Q,
  P.KT,
  P.W,
  P.DR,
  P.NOVOR,
  cpconvert (866, 1251, MSO.NAME) MSO_NAME,
  MSO.OGRN MSO_OGRN,
  MSO.OKATO MSO_OKATO
 from {period}S{lpu} S
  join {period}P{lpu} P on P.SN_POL = S.SN_POL
  join BASE/COMMON/SLMSO MSO on MSO.CODE = P.Q
 where (S.OTD in ({section}))
  and (floor(S.COD/1000) in (3, 27, 28, 29, 22, 50))</value>
    <comment>Пациенты для счетов</comment>
  </data>
  <data name="SELECT_INVOICE_PEOPLE_FOREIGN" xml:space="preserve">
    <value>select distinct
  P.RECID,
  P.T_POL,
  cpconvert (866, 1251, P.SN_POL) SN_POL,
  P.Q,
  PAT.KT,
  P.W,
  P.DR,
  P.NOVOR,
  cpconvert (866, 1251, MSO.FULLNAME) MSO_NAME,
  MSO.OGRN MSO_OGRN,
  MSO.OKATO MSO_OKATO
 from {period}C{lpu} S
  join {period}I{lpu} P on P.SN_POL = S.SN_POL
  join {period}PAT on PAT.SN_POL = I.SN_POL
  left outer join BASE/COMMON/MSOIN MSO on MSO.CODE = P.Q_VCODE
 where (S.OTD in ({section}))
  and (floor(S.COD/1000) in (3, 27, 28, 29, 22, 50))</value>
  </data>
  <data name="SELECT_INVOICE_RECORDS_COUNT" xml:space="preserve">
    <value>select count(*)
 from {period}S{lpu}
 where (floor(COD/1000) in (3, 27, 28, 29, 22, 50))
  and (OTD in ({section}))</value>
    <comment>Число законченных случаев</comment>
  </data>
  <data name="SELECT_NO_DOCTOR_DEPT" xml:space="preserve">
    <value>select distinct
  'Врач ' + ltrim(S.TN1) + ' не прописан в отделении ' + S.OTD EMSG
 from {period}S{lpu} S
  left outer join BASE/DESCR/STRUCT X on X.BUXC = S.OTD
  left outer join BASE/DESCR/MEDPERS M on M.PODR + M.CODE = X.CODE + S.TN1
  left outer join BASE/COMMON/MEDPOST MP on MP.CODE = M.POST
 where MP.CODEFSS is null</value>
    <comment>Выборка ошибки - врач не привязан к отделению</comment>
  </data>
  <data name="SELECT_PEOPLE" xml:space="preserve">
    <value>select distinct
  P.RECID,
  cpconvert(866, 1251, P.FAM) FAM,
  cpconvert(866, 1251, P.IM) IM,
  cpconvert(866, 1251, P.OT) OT,
  P.W,
  P.DR,
  P.SS,
  cpconver(866, 1251, P.SN_POL) SN_POL,
  PP.Q_PASP,
  PP.SN_PASP,
  cpconvert(866, 1251, P.PR) BP,
  cpconvert(866, 1251, P.ADRES) ADRES,
  P.SP,
  P.KT,
  cpconvert(866, 1251, P.FAM1) FAMP,
  cpconvert(866, 1251, P.IM1) IMP,
  cpconvert(866, 1251, P.OT1) OTP,
  P.WP,
  P.DRP
 from {period}P{lpu} P
  join {period}S{lpu} S on S.SN_POL = P.SN_POL
  left outer join {period}PAT PP on PP.SN_POL = P.SN_POL
 where S.OTD in ({section})
 order by 1</value>
  </data>
  <data name="SELECT_PEOPLE_COUNT" xml:space="preserve">
    <value>select count(distinct SN_POL)
 from {period}S{lpu}
 where OTD in ({section})</value>
    <comment>К-во пациентов</comment>
  </data>
  <data name="SELECT_RECOURSES" xml:space="preserve">
    <value>select distinct
  S.RECID,
  S.OTD,
  UMP.SLUSL COND,
  S.COD,
  S.DS,
  S.IG IG,
  nvl(RO.SLIZ, 'xxx') RESCODE,
  K.OPL, K.MSP,
  S.BE
 from {period}S{lpu} S
  join {period}P{lpu} P on P.SN_POL = S.SN_POL
  left outer join {period}DIAGNOZ D on (D.SN_POL = S.SN_POL) and (D.OTD = S.OTD) and (D.DIAGIN = S.DS)
  left outer join BASE/COMMON/KMU K on cast (K.CODE as int) = S.COD
  left outer join BASE/COMMON/SLUMP UMP on UMP.CODE = K.UMP
  left outer join BASE/COMMON/REZOBR RO on RO.CODE = S.BE
 where (ltrim(P.RECID) = ?)
  and (floor(S.COD/1000) in (3, 27, 28, 29, 22, 50))
  and (S.OTD in ({section}))
 order by 1, 2</value>
    <comment>Выборка законченных случаев для пациента</comment>
  </data>
  <data name="SELECT_TOTAL" xml:space="preserve">
    <value>select sum(S_ALL) TOTAL from {period}S{lpu} where OTD in ({section})</value>
    <comment>Сумма к оплате по счету</comment>
  </data>
</root>